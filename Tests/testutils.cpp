#include "testutils.h"

TestUtils::TestUtils(QObject *parent) : QObject(parent) {

}

void TestUtils::testMean() {

    VectorXd ref(4);
    ref << 0.64237139, 0.91779573, 1.02282648, 0.95953253;

    MatrixXd means(4, 7);
    means <<  0.83739289,  0.56423018,  2.30698891,  3.91008486,
                3.7346484 , -1.87705681,  0.89511047,
            1.        ,  0.88692808,  1.67789181,  2.30040957,
            2.2658316 , -0.19364733,  1.00083627,
          1.12305334,  0.81716194, -2.79408459,  2.28423273,
           -0.95389502,  3.68341112,  3.0310954,1.        ,
            0.87246599, -0.69528483,  1.45866493,
            0.07463464,  2.13002393,  1.81610031;

    VectorXd weights(7);
    weights << 0.20016137286779626, 0.7342714370953222, 2.914706127277378e-06, 0.0005389688065492919,
            8.197550532494972e-05, 3.325093712288507e-05, 0.06491008008175714;

    VectorXd result = Utils::mean(&means, &weights);

    QVERIFY2( result.isApprox(ref, 1e-4), "" );

}

void TestUtils::testCovar() {

    MatrixXd ref(4, 4);
    ref <<  0.67356288, 0.        , 0.03433435, 0.,
            0.        , 0.5       , 0.        , 0.,
            0.03433435, 0.        , 0.67314287, 0.,
            0.        , 0.        , 0.        , 0.5;

    MatrixXd means(4, 7);
    means << 0.        , -6.56102447, -3.39994248,  4.56336316,
            -1.83377163,  0.01633958, -0.3950381 ,
            1.        ,  1.        ,  1.        ,  1.        ,
             1.        ,  1.        ,  1.        ,
            0.        , -2.93654521, -5.81743562, -1.36682227,
            -3.70902982,  0.34681387, -0.06644286,
            1.        ,  1.        ,  1.        ,  1.        ,
             1.        ,  1.        ,  1. ;

    VectorXd mean(4);
    mean << -0.16260711, 1., 0.12305334, 1.;

    VectorXd weights(7);
    weights << 0.13246386836723892, 2.8030303203230023e-12, 6.437903200599261e-11,
            5.496531511815753e-06, 8.917049238997886e-05, 0.43804943739243324, 0.42939202714924385;

    QList<MatrixXd *> covars;
    MatrixXd *covar1 = new MatrixXd(4, 7);
    MatrixXd *covar2 = new MatrixXd(4, 7);
    MatrixXd *covar3 = new MatrixXd(4, 7);
    MatrixXd *covar4 = new MatrixXd(4, 7);

    *covar1 <<  1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0.;

    *covar2 <<  0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0.;

    *covar3 <<  0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                0. , 0. , 0. , 0. , 0. , 0. , 0.;

    *covar4 <<  0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5;

    covars.append(covar1);
    covars.append(covar2);
    covars.append(covar3);
    covars.append(covar4);

    MatrixXd covar = Utils::covar(covars, &means, &mean, &weights);

    QVERIFY2( covar.isApprox(ref, 1e-4), "" );
}

void TestUtils::testCovar2() {

    MatrixXd refCovar(4, 4);
    refCovar << 0.62434961, 0.26641989, 0.06118047, 0.01838241,
                0.26641989, 0.40378449, 0.01495644, 0.00935537,
                0.06118047, 0.01495644, 0.89753015, 0.38346248,
                0.01838241, 0.00935537, 0.38346248, 0.4538108;


    MatrixXd refSum(4, 4);
    refSum <<   0.60134895,  0.25720403,  0.01104227, -0.00279381,
                0.25720403,  0.40006263, -0.00279381,  0.00187185,
                0.01104227, -0.00279381,  0.60121387,  0.2572382 ,
                -0.00279381,  0.00187185,  0.2572382 ,  0.40003973;

    MatrixXd refMul(4, 4);
    refMul <<   0.02300066, 0.00921587, 0.0501382 , 0.02117622,
                0.00921587, 0.00372185, 0.01775025, 0.00748352,
                0.0501382 , 0.01775025, 0.29631628, 0.12622428,
                0.02117622, 0.00748352, 0.12622428, 0.05377106;

    MatrixXd refDelta(4, 7);
    refDelta << 0.19502151, -2.5194282 ,  1.66461752,  3.09227701,
                0.25273908,  3.26771348, -0.0781412 ,
                0.08220427, -1.11144306,  0.76009608,  1.34803587,
                0.08304054,  1.38261384, -0.03086766,
                0.10022685,  2.66058464, -3.81691107, -1.9767215 ,
                2.00826891,  1.26140624, -0.20566454,
                0.04046747,  1.17049139, -1.65481736, -0.8848979 ,
                0.85656777,  0.49913239, -0.08706655;


    MatrixXd means(4, 7);
    means << 0.83739289, -1.87705681,  2.30698891,  3.7346484 ,
            0.89511047,  3.91008486,  0.56423018,
           1.        , -0.19364733,  1.67789181,  2.2658316 ,
            1.00083627,  2.30040957,  0.88692808,
           1.12305334,  3.68341112, -2.79408459, -0.95389502,
            3.0310954 ,  2.28423273,  0.81716194,
           1.        ,  2.13002393, -0.69528483,  0.07463464,
            1.81610031,  1.45866493,  0.87246599 ;

    VectorXd mean(4);
    mean << 0.64237139 ,0.91779573, 1.02282648, 0.95953253 ;

    VectorXd weights(7);
    weights << 0.20016137286779637, 3.325093712288519e-05, 2.914706127277388e-06, 8.197550532495002e-05,
            0.06491008008175714, 0.0005389688065492924, 0.734271437095322;

    QList<MatrixXd *> covars;
    MatrixXd *covar1 = new MatrixXd(4, 7);
    MatrixXd *covar2 = new MatrixXd(4, 7);
    MatrixXd *covar3 = new MatrixXd(4, 7);
    MatrixXd *covar4 = new MatrixXd(4, 7);

    *covar1 <<  1.17522955,  0.45773407,  0.45773407,  0.45773407,
                0.45773407,  0.45773407,  0.45773407,
                0.5025    ,  0.19581817,  0.19581817,  0.19581817,
                0.19581817,  0.19581817,  0.19581817,
                0.03433435,  0.00521338,  0.00521338,  0.00521338,
                0.00521338,  0.00521338,  0.00521338,
                0.        , -0.00349296, -0.00349296, -0.00349296,
                -0.00349296, -0.00349296, -0.00349296;

    *covar2 <<  0.5025    ,  0.19581817,  0.19581817,  0.19581817,
                0.19581817,  0.19581817,  0.19581817,
                0.505     ,  0.37380183,  0.37380183,  0.37380183,
                0.37380183,  0.37380183,  0.37380183,
                0.        , -0.00349296, -0.00349296, -0.00349296,
                -0.00349296, -0.00349296, -0.00349296,
                0.        ,  0.00234029,  0.00234029,  0.00234029,
                0.00234029,  0.00234029,  0.00234029;

    *covar3 <<  0.03433435,  0.00521338,  0.00521338,  0.00521338,
                0.00521338,  0.00521338,  0.00521338,
                0.        , -0.00349296, -0.00349296, -0.00349296,
                -0.00349296, -0.00349296, -0.00349296,
                1.17480954,  0.4576703 ,  0.4576703 ,  0.4576703 ,
                0.4576703 ,  0.4576703 ,  0.4576703 ,
                0.5025    ,  0.1958609 ,  0.1958609 ,  0.1958609 ,
                0.1958609 ,  0.1958609 ,  0.1958609;

    *covar4 <<  0.        , -0.00349296, -0.00349296, -0.00349296,
                -0.00349296, -0.00349296, -0.00349296,
                0.        ,  0.00234029,  0.00234029,  0.00234029,
                0.00234029,  0.00234029,  0.00234029,
                0.5025    ,  0.1958609 ,  0.1958609 ,  0.1958609 ,
                0.1958609 ,  0.1958609 ,  0.1958609 ,
                0.505     ,  0.3737732 ,  0.3737732 ,  0.3737732 ,
                0.3737732 ,  0.3737732 ,  0.3737732;

    covars.append(covar1);
    covars.append(covar2);
    covars.append(covar3);
    covars.append(covar4);

    MatrixXd res = Utils::covar(covars, &means, &mean, &weights);

    QVERIFY2( res.isApprox(refCovar, 1e-4), "" );
}









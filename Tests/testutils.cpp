#include "testutils.h"

TestUtils::TestUtils(QObject *parent) : QObject(parent) {

}

void TestUtils::testMean() {

    VectorXd ref(4);
    ref << 0.64237139, 0.91779573, 1.02282648, 0.95953253;

    MatrixXd means(4, 7);
    means <<  0.83739289,  0.56423018,  2.30698891,  3.91008486,
                3.7346484 , -1.87705681,  0.89511047,
            1.        ,  0.88692808,  1.67789181,  2.30040957,
            2.2658316 , -0.19364733,  1.00083627,
          1.12305334,  0.81716194, -2.79408459,  2.28423273,
           -0.95389502,  3.68341112,  3.0310954,1.        ,
            0.87246599, -0.69528483,  1.45866493,
            0.07463464,  2.13002393,  1.81610031;

    VectorXd weights(7);
    weights << 0.20016137286779626, 0.7342714370953222, 2.914706127277378e-06, 0.0005389688065492919,
            8.197550532494972e-05, 3.325093712288507e-05, 0.06491008008175714;

    VectorXd result = Utils::mean(&means, &weights);

    QVERIFY2( result.isApprox(ref, 1e-4), "" );

}

void TestUtils::testCovar() {

    MatrixXd ref(4, 4);
    ref <<  0.67356288, 0.        , 0.03433435, 0.,
            0.        , 0.5       , 0.        , 0.,
            0.03433435, 0.        , 0.67314287, 0.,
            0.        , 0.        , 0.        , 0.5;

    MatrixXd means(4, 7);
    means << 0.        , -6.56102447, -3.39994248,  4.56336316,
            -1.83377163,  0.01633958, -0.3950381 ,
            1.        ,  1.        ,  1.        ,  1.        ,
             1.        ,  1.        ,  1.        ,
            0.        , -2.93654521, -5.81743562, -1.36682227,
            -3.70902982,  0.34681387, -0.06644286,
            1.        ,  1.        ,  1.        ,  1.        ,
             1.        ,  1.        ,  1. ;

    VectorXd mean(4);
    mean << -0.16260711, 1., 0.12305334, 1.;

    VectorXd weights(7);
    weights << 0.13246386836723892, 2.8030303203230023e-12, 6.437903200599261e-11,
            5.496531511815753e-06, 8.917049238997886e-05, 0.43804943739243324, 0.42939202714924385;

    QList<MatrixXd *> covars;
    MatrixXd *covar1 = new MatrixXd(4, 7);
    MatrixXd *covar2 = new MatrixXd(4, 7);
    MatrixXd *covar3 = new MatrixXd(4, 7);
    MatrixXd *covar4 = new MatrixXd(4, 7);

    *covar1 <<  1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0.;

    *covar2 <<  0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0.;

    *covar3 <<  0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                0. , 0. , 0. , 0. , 0. , 0. , 0.;

    *covar4 <<  0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0. , 0. , 0. , 0. , 0. , 0. , 0. ,
                0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5;

    covars.append(covar1);
    covars.append(covar2);
    covars.append(covar3);
    covars.append(covar4);

    MatrixXd covar = Utils::covar(covars, &means, &mean, &weights);

    QVERIFY2( covar.isApprox(ref, 1e-4), "" );
}








